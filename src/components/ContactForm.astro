<form
  id="contact-form"
  name="contact"
  action="/form-success"
  method="post"
  data-netlify="true"
  netlify-honeypot="bot-field"
  novalidate
>
  <input type="hidden" name="form-name" value="contact" />

  <fieldset>
    <label for="firstName">First name</label>
    <input
      id="firstName"
      name="firstName"
      type="text"
      autocomplete="given-name"
      required
    />
    <span class="error-text font-xs-step-2">First name is required</span>
  </fieldset>

  <fieldset>
    <label for="lastName">Last name</label>
    <input
      id="lastName"
      name="lastName"
      type="text"
      autocomplete="family-name"
      required
    />
    <span class="error-text font-xs-step-2">Last name is required</span>
  </fieldset>

  <fieldset>
    <label for="email">Email</label>
    <input id="email" name="email" type="email" autocomplete="email" required />
    <span class="error-text font-xs-step-2">Email is not valid</span>
  </fieldset>

  <fieldset>
    <label for="message">Message</label>
    <textarea id="message" name="message" rows="5" required minlength="5"
    ></textarea>
    <span class="error-text font-xs-step-2">Message is required</span>
  </fieldset>

  <button class="submit btn" type="submit">Send</button>
</form>

<style lang="scss">
  .error-text {
    display: none;
    color: var(--clr-error);
    text-align: end;
  }

  /* Remove any older rules like `form:has(:invalid) ...` */
  /* Only show errors AFTER the first failed submit */
  form.was-validated fieldset:has(:invalid) .error-text {
    display: block;
  }

  form.was-validated fieldset:has(:invalid) input,
  form.was-validated fieldset:has(:invalid) textarea {
    border: 2px solid var(--clr-error);
  }

  form.was-validated fieldset:has(:valid) input,
  form.was-validated fieldset:has(:valid) textarea {
    border: 2px solid var(--color-accent-300);
  }
</style>

<script>
  // @ts-nocheck  // keep VS Code quiet for inline scripts in .astro

  const form = document.getElementById("contact-form");
  const first = document.getElementById("firstName");
  const last = document.getElementById("lastName");
  const email = document.getElementById("email");
  const msg = document.getElementById("message");

  // Helpers to prevent whitespace-only values on names/message
  const requireNonSpace = (el, message) => {
    if (!el) return;
    el.setCustomValidity(el.value && el.value.trim() !== "" ? "" : message);
  };

  // Keep custom validity up to date while typing (no errors shown until submit)
  [first, last].forEach((el, i) => {
    if (!el) return;
    const label = i === 0 ? "first" : "last";
    el.addEventListener("input", () =>
      requireNonSpace(el, `Please enter your ${label} name.`)
    );
  });
  if (msg) {
    msg.addEventListener("input", () => {
      const hasText = msg.value && msg.value.trim() !== "";
      msg.setCustomValidity(hasText ? "" : "Please enter a message.");
    });
  }

  if (form) {
    form.addEventListener("submit", (e) => {
      // Ensure latest checks are applied
      requireNonSpace(first, "Please enter your first name.");
      requireNonSpace(last, "Please enter your last name.");
      if (msg)
        msg.setCustomValidity(
          msg.value && msg.value.trim() !== "" ? "" : "Please enter a message."
        );

      if (!form.checkValidity()) {
        e.preventDefault();
        form.classList.add("was-validated");
        const firstInvalid = form.querySelector(":invalid");
        if (firstInvalid && firstInvalid.focus) firstInvalid.focus();
      }
      // If valid, it posts to Netlify as normal
    });
  }
</script>
