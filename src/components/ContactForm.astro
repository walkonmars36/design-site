<form
  id="contact-form"
  name="contact"
  action="/form-success"
  method="post"
  data-netlify="true"
  netlify-honeypot="bot-field"
>
  <input type="hidden" name="form-name" value="contact" />

  <fieldset>
    <label for="firstName">First name</label>
    <input
      id="firstName"
      name="firstName"
      type="text"
      autocomplete="given-name"
      required
    />
    <span class="error-text font-xs-step-2">First name is required</span>
  </fieldset>

  <fieldset>
    <label for="lastName">Last name</label>
    <input
      id="lastName"
      name="lastName"
      type="text"
      autocomplete="family-name"
      required
    />
    <span class="error-text font-xs-step-2">Last name is required</span>
  </fieldset>

  <fieldset>
    <label for="email">Email</label>
    <input id="email" name="email" type="email" autocomplete="email" required />
    <span class="error-text font-xs-step-2">Email is not valid</span>
  </fieldset>

  <fieldset>
    <label for="message">Message</label>
    <textarea id="message" name="message" rows="5" required minlength="5"
    ></textarea>
    <span class="error-text font-xs-step-2">Message is required</span>
  </fieldset>

  <button class="submit btn" type="submit">Send</button>
</form>

<style lang="scss">
  /* base */
  .error-text {
    display: none;
    color: var(--clr-error);
    text-align: end;
  }
  form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  label {
    color: var(--color-white);
  }
  input,
  textarea {
    width: 100%;
    padding: 0.25em 0.5em;
    color: inherit;
    background: var(--input-background);
    border: none;
    border-radius: var(--border-radius-sm);
    border-bottom: 2px solid var(--input-grey);
    outline: transparent;
  }
  input:not(textarea) {
    line-height: 1;
    height: 2.25rem;
  }
  textarea {
    margin-top: var(--space-2xs);
    resize: vertical;
    overflow: auto;
  }
  input:focus,
  textarea:focus {
    background: var(--input-focus);
    color: var(--color-primary);
  }

  /* kill default fieldset box so only the inputs show state */
  fieldset {
    border: 0;
    padding: 0;
    margin: 0;
  }

  /* show styles ONLY AFTER first failed submit;
   target just inputs/textarea and change the bottom border */
  form.was-validated input:invalid,
  form.was-validated textarea:invalid {
    border: none;
    border-bottom: 2px solid var(--clr-error);
  }

  form.was-validated input:valid,
  form.was-validated textarea:valid {
    border: none;
    border-bottom: 2px solid var(--color-accent-300);
  }

  form.was-validated input:invalid ~ .error-text,
  form.was-validated textarea:invalid ~ .error-text {
    display: block;
  }
  /* button */
  .submit.btn {
    align-self: flex-start;
    font-weight: 700;
    background: var(--color-accent-400);
    padding: 0.5em 1.75em;
    border-radius: var(--border-radius-sm);
    margin-top: var(--space-m-l);
    transition:
      background 0.2s ease-in-out,
      transform 0.2s ease-in-out;
  }
  .submit.btn:hover {
    background: var(--color-accent-300);
    transform: scale(1.03);
  }
</style>

<script>
  // @ts-nocheck

  const attachValidation = () => {
    const form = document.getElementById("contact-form");
    if (!form || form.dataset.bound === "true") return; // avoid double-binding
    form.dataset.bound = "true";

    // Disable native popups only when JS is active (progressive enhancement)
    form.noValidate = true;

    const first = document.getElementById("firstName");
    const last = document.getElementById("lastName");
    const msg = document.getElementById("message");

    // Block whitespace-only values for names/message
    const ensureNonEmpty = (el, label) => {
      if (!el) return;
      el.setCustomValidity(
        el.value && el.value.trim() !== "" ? "" : `Please enter your ${label}.`
      );
    };

    first &&
      first.addEventListener("input", () =>
        ensureNonEmpty(first, "first name")
      );
    last &&
      last.addEventListener("input", () => ensureNonEmpty(last, "last name"));
    msg &&
      msg.addEventListener("input", () => {
        msg.setCustomValidity(
          msg.value && msg.value.trim() !== "" ? "" : "Please enter a message."
        );
      });

    form.addEventListener("submit", (e) => {
      ensureNonEmpty(first, "first name");
      ensureNonEmpty(last, "last name");
      if (msg)
        msg.setCustomValidity(
          msg.value && msg.value.trim() !== "" ? "" : "Please enter a message."
        );

      if (!form.checkValidity()) {
        e.preventDefault();
        form.classList.add("was-validated");
        const firstInvalid = form.querySelector(":invalid");
        if (firstInvalid && firstInvalid.focus) firstInvalid.focus();
      }
      // else: submit to Netlify normally
    });
  };

  // Initial load
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", attachValidation, {
      once: true,
    });
  } else {
    attachValidation();
  }

  // Astro soft navigations (if you use them)
  document.addEventListener("astro:page-load", attachValidation);

  // Back/forward cache: re-enable our classing and bindings, clear previous state
  window.addEventListener("pageshow", () => {
    const form = document.getElementById("contact-form");
    if (form) {
      form.classList.remove("was-validated");
      attachValidation();
    }
  });
</script>
