<form
  id="contact-form"
  name="contact"
  action="/form-success"
  method="post"
  data-netlify="true"
  netlify-honeypot="bot-field"
>
  <input type="hidden" name="form-name" value="contact" />
  <!-- real honeypot input for Netlify -->
  <input type="text" name="bot-field" tabindex="-1" autocomplete="off" hidden />

  <fieldset>
    <label for="firstName">First name</label>
    <input
      id="firstName"
      name="firstName"
      type="text"
      autocomplete="given-name"
      required
      placeholder=" "
      aria-describedby="firstName-error"
    />
    <span
      id="firstName-error"
      class="error-text font-xs-step-2"
      aria-live="polite"
      aria-atomic="true"
    >
      First name is required
    </span>
  </fieldset>

  <fieldset>
    <label for="lastName">Last name</label>
    <input
      id="lastName"
      name="lastName"
      type="text"
      autocomplete="family-name"
      required
      placeholder=" "
      aria-describedby="lastName-error"
    />
    <span
      id="lastName-error"
      class="error-text font-xs-step-2"
      aria-live="polite"
      aria-atomic="true"
    >
      Last name is required
    </span>
  </fieldset>

  <fieldset>
    <label for="email">Email</label>
    <input
      id="email"
      name="email"
      type="email"
      autocomplete="email"
      inputmode="email"
      autocapitalize="none"
      spellcheck="false"
      required
      placeholder=" "
      aria-describedby="email-error"
    />
    <span
      id="email-error"
      class="error-text font-xs-step-2"
      aria-live="polite"
      aria-atomic="true"
    >
      Email is not valid
    </span>
  </fieldset>

  <fieldset>
    <label for="message">Message</label>
    <textarea
      id="message"
      name="message"
      rows="5"
      required
      minlength="5"
      placeholder=" "
      aria-describedby="message-error"
      spellcheck="true"></textarea>
    <span
      id="message-error"
      class="error-text font-xs-step-2"
      aria-live="polite"
      aria-atomic="true"
    >
      Message is required
    </span>
  </fieldset>

  <button class="submit btn" type="submit">Send</button>
</form>

<style lang="scss">
  /* base */
  .error-text {
    display: none;
    color: var(--clr-error);
    text-align: end;
  }

  form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  label {
    color: var(--color-white);
  }

  input,
  textarea {
    width: 100%;
    padding: 0.25em 0.5em;
    color: inherit;
    background: var(--input-background);
    border: none;
    border-radius: var(--border-radius-sm);
    border-bottom: 2px solid var(--input-grey);
    outline: transparent;
  }

  input {
    line-height: 1;
    height: 2.25rem;
  }

  textarea {
    margin-top: var(--space-2xs);
    resize: vertical;
    overflow: auto;
  }

  input:focus,
  textarea:focus {
    background: var(--input-focus);
    color: var(--color-primary);
  }

  /* keep focus visible for keyboard users */
  input:focus-visible,
  textarea:focus-visible {
    outline: 2px solid var(--color-accent-300);
    outline-offset: 2px;
  }

  /* Append an asterisk to labels whose fieldset contains a required control */
  /* use currentColor so it matches the label colour; swap to var(--clr-error) if you prefer red */
  fieldset:has([required]) > label::after {
    content: " *";
    color: currentColor;
    font-weight: 700;
  }

  /* Reset default fieldset box so only the inputs show state */
  fieldset {
    border: 0;
    padding: 0;
    margin: 0;
  }

  /* show styles ONLY AFTER first failed submit; full border on controls */
  form.was-validated input:invalid,
  form.was-validated textarea:invalid {
    border: 2px solid var(--clr-error);
  }

  form.was-validated input:valid,
  form.was-validated textarea:valid {
    border: 2px solid var(--color-accent-300);
  }

  form.was-validated input:invalid ~ .error-text,
  form.was-validated textarea:invalid ~ .error-text {
    display: block;
  }

  /* button */
  .submit.btn {
    align-self: flex-start;
    font-weight: 700;
    background: var(--color-accent-400);
    padding: 0.5em 1.75em;
    border-radius: var(--border-radius-sm);
    margin-top: var(--space-m-l);
    transition:
      background 0.2s ease-in-out,
      transform 0.2s ease-in-out;
  }
  .submit.btn:hover {
    background: var(--color-accent-300);
    transform: scale(1.03);
  }

  /* --- Autofill normalisation (consolidated) --- */
  /* Make filled/autofilled fields look like 'focused' */
  input:not(:placeholder-shown),
  textarea:not(:placeholder-shown),
  input:-webkit-autofill,
  textarea:-webkit-autofill {
    background: var(--input-focus);
    color: var(--color-primary);
  }

  /* Paint over Chrome/Safari yellow */
  input:-webkit-autofill,
  textarea:-webkit-autofill {
    -webkit-text-fill-color: var(--color-primary);
    box-shadow: 0 0 0 1000px var(--input-focus) inset;
    -webkit-box-shadow: 0 0 0 1000px var(--input-focus) inset;
  }

  /* Show a 'valid' border on autofilled inputs; invalid overrides below */
  input:-webkit-autofill {
    border: 2px solid var(--color-accent-300);
  }

  /* If the autofilled value is invalid (e.g., bad email), show error border */
  form.was-validated input:-webkit-autofill:invalid,
  input:-webkit-autofill:invalid {
    border: 2px solid var(--clr-error);
  }
</style>

<script>
  // @ts-nocheck

  const attachValidation = () => {
    const form = document.getElementById("contact-form");
    if (!form || form.dataset.bound === "true") return;
    form.dataset.bound = "true";

    // Use inline errors (no native bubbles) when JS is active
    form.noValidate = true;

    const first = document.getElementById("firstName");
    const last = document.getElementById("lastName");
    const email = document.getElementById("email");
    const msg = document.getElementById("message");

    // Block whitespace-only values for names/message and reflect a11y state
    const ensureNonEmpty = (el, label) => {
      if (!el) return;
      const ok = !!el.value && el.value.trim() !== "";
      el.setCustomValidity(ok ? "" : `Please enter your ${label}.`);
      el.setAttribute("aria-invalid", ok ? "false" : "true");
    };

    // Keep custom validity up to date while typing (no errors shown until submit)
    first &&
      first.addEventListener("input", () =>
        ensureNonEmpty(first, "first name")
      );
    last &&
      last.addEventListener("input", () => ensureNonEmpty(last, "last name"));
    msg &&
      msg.addEventListener("input", () => {
        const ok = !!msg.value && msg.value.trim() !== "";
        msg.setCustomValidity(ok ? "" : "Please enter a message.");
        msg.setAttribute("aria-invalid", ok ? "false" : "true");
      });

    // Optional: trim email input on blur to avoid stray spaces
    email &&
      email.addEventListener("blur", () => {
        email.value = email.value.trim();
      });

    form.addEventListener("submit", (e) => {
      ensureNonEmpty(first, "first name");
      ensureNonEmpty(last, "last name");
      if (msg) {
        const ok = !!msg.value && msg.value.trim() !== "";
        msg.setCustomValidity(ok ? "" : "Please enter a message.");
        msg.setAttribute("aria-invalid", ok ? "false" : "true");
      }

      if (!form.checkValidity()) {
        e.preventDefault();
        form.classList.add("was-validated");
        const firstInvalid = form.querySelector(":invalid");
        if (firstInvalid && firstInvalid.focus) firstInvalid.focus();
      }
    });
  };

  // Initial load
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", attachValidation, {
      once: true,
    });
  } else {
    attachValidation();
  }

  // Astro soft navigations + BFCache restores
  document.addEventListener("astro:page-load", attachValidation);
  window.addEventListener("pageshow", () => {
    const form = document.getElementById("contact-form");
    if (form) {
      form.classList.remove("was-validated");
      attachValidation();
    }
  });
</script>
