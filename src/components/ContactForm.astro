<form
  id="contact-form"
  name="contact"
  action="/form-success"
  method="post"
  data-netlify="true"
  netlify-honeypot="bot-field"
  novalidate
>
  <input type="hidden" name="form-name" value="contact" />

  <fieldset>
    <label for="firstName">First name</label>
    <input
      id="firstName"
      name="firstName"
      type="text"
      autocomplete="given-name"
      required
    />
    <span class="error-text font-xs-step-2">First name is required</span>
  </fieldset>

  <fieldset>
    <label for="lastName">Last name</label>
    <input
      id="lastName"
      name="lastName"
      type="text"
      autocomplete="family-name"
      required
    />
    <span class="error-text font-xs-step-2">Last name is required</span>
  </fieldset>

  <fieldset>
    <label for="email">Email</label>
    <input id="email" name="email" type="email" autocomplete="email" required />
    <span class="error-text font-xs-step-2">Email is not valid</span>
  </fieldset>

  <fieldset>
    <label for="message">Message</label>
    <textarea id="message" name="message" rows="5" required minlength="5"
    ></textarea>
    <span class="error-text font-xs-step-2">Message is required</span>
  </fieldset>

  <button class="submit btn" type="submit">Send</button>
</form>

<style lang="scss">
  /* base */
  .error-text {
    display: none;
    color: var(--clr-error);
    text-align: end;
  }
  form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  label {
    color: var(--color-white);
  }
  input,
  textarea {
    width: 100%;
    padding: 0.25em 0.5em;
    color: inherit;
    background: var(--input-background);
    border: none;
    border-radius: var(--border-radius-sm);
    border-bottom: 2px solid var(--input-grey);
    outline: transparent;
  }
  input:not(textarea) {
    line-height: 1;
    height: 2.25rem;
  }
  textarea {
    margin-top: var(--space-2xs);
    resize: vertical;
    overflow: auto;
  }
  input:focus,
  textarea:focus {
    background: var(--input-focus);
    color: var(--color-primary);
  }

  /* show styles ONLY AFTER first failed submit */
  form.was-validated :invalid {
    border: 2px solid var(--clr-error);
  }
  form.was-validated :invalid ~ .error-text {
    display: block;
  }

  /* optional success styling after first failed submit */
  form.was-validated :valid {
    border: 2px solid var(--color-accent-300);
  }

  /* button */
  .submit.btn {
    align-self: flex-start;
    font-weight: 700;
    background: var(--color-accent-400);
    padding: 0.5em 1.75em;
    border-radius: var(--border-radius-sm);
    margin-top: var(--space-m-l);
    transition:
      background 0.2s ease-in-out,
      transform 0.2s ease-in-out;
  }
  .submit.btn:hover {
    background: var(--color-accent-300);
    transform: scale(1.03);
  }
</style>

<script>
  // @ts-nocheck  // keep VS Code quiet for inline scripts in .astro

  const form = document.getElementById("contact-form");
  const first = document.getElementById("firstName");
  const last = document.getElementById("lastName");
  const email = document.getElementById("email");
  const msg = document.getElementById("message");

  // Helpers to prevent whitespace-only values on names/message
  const requireNonSpace = (el, message) => {
    if (!el) return;
    el.setCustomValidity(el.value && el.value.trim() !== "" ? "" : message);
  };

  // Keep custom validity up to date while typing (no errors shown until submit)
  [first, last].forEach((el, i) => {
    if (!el) return;
    const label = i === 0 ? "first" : "last";
    el.addEventListener("input", () =>
      requireNonSpace(el, `Please enter your ${label} name.`)
    );
  });
  if (msg) {
    msg.addEventListener("input", () => {
      const hasText = msg.value && msg.value.trim() !== "";
      msg.setCustomValidity(hasText ? "" : "Please enter a message.");
    });
  }

  if (form) {
    form.addEventListener("submit", (e) => {
      // Ensure latest checks are applied
      requireNonSpace(first, "Please enter your first name.");
      requireNonSpace(last, "Please enter your last name.");
      if (msg)
        msg.setCustomValidity(
          msg.value && msg.value.trim() !== "" ? "" : "Please enter a message."
        );

      if (!form.checkValidity()) {
        e.preventDefault();
        form.classList.add("was-validated");
        const firstInvalid = form.querySelector(":invalid");
        if (firstInvalid && firstInvalid.focus) firstInvalid.focus();
      }
      // If valid, it posts to Netlify as normal
    });
  }
</script>
